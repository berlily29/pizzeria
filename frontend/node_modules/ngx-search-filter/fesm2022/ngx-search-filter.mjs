import * as i0 from '@angular/core';
import { Pipe, NgModule } from '@angular/core';

class NgxFilterPipe {
    /**
       * @param items object from array
       * @param term term's search
       * @param excludes array of strings which will ignored during search
       */
    transform(items, term, excludes = []) {
        if (!term || !items)
            return items;
        return NgxFilterPipe.filter(items, term, excludes);
    }
    /**
     *
     * @param items List of items to filter
     * @param term  a string term to compare with every property of the list
     * @param excludes List of keys which will be ignored during search
     *
     */
    static filter(items, term, excludes) {
        const toCompare = term.toLowerCase();
        function checkInside(item, term) {
            if (typeof item === "string" && item.toString().toLowerCase().includes(toCompare)) {
                return true;
            }
            for (let property in item) {
                if (item[property] === null || item[property] == undefined || excludes.includes(property)) {
                    continue;
                }
                if (typeof item[property] === 'object') {
                    if (checkInside(item[property], term)) {
                        return true;
                    }
                }
                else if (item[property].toString().toLowerCase().includes(toCompare)) {
                    return true;
                }
            }
            return false;
        }
        return items.filter(function (item) {
            return checkInside(item, term);
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.0", ngImport: i0, type: NgxFilterPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe }); }
    static { this.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "18.0.0", ngImport: i0, type: NgxFilterPipe, name: "filter", pure: false }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.0", ngImport: i0, type: NgxFilterPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'filter',
                    pure: false
                }]
        }] });

class NgxSearchFilterModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.0", ngImport: i0, type: NgxSearchFilterModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "18.0.0", ngImport: i0, type: NgxSearchFilterModule, declarations: [NgxFilterPipe], exports: [NgxFilterPipe] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "18.0.0", ngImport: i0, type: NgxSearchFilterModule }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.0", ngImport: i0, type: NgxSearchFilterModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [
                        NgxFilterPipe
                    ],
                    imports: [],
                    exports: [
                        NgxFilterPipe
                    ]
                }]
        }] });

/*
 * Public API Surface of ngx-search-filter
 */

/**
 * Generated bundle index. Do not edit.
 */

export { NgxFilterPipe, NgxSearchFilterModule };
//# sourceMappingURL=ngx-search-filter.mjs.map
